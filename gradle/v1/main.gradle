println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

allprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "idea"

    archivesBaseName = "$modid-$project.name"
    group = "$mod_maven_group.$modid"
    version = "%sv$mod_version-$project_release_type".formatted(project_game_versions.split(',').size() < 1 ? "${libs.versions.minecraft.get()}-" : "")

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = "Sponge / Mixin"
            url = "https://repo.spongepowered.org/repository/maven-public/"
        }
        maven {
            // location of the maven that hosts JEI files before January 2023
            name = "Progwml6's maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            // location of the maven that hosts JEI files since January 2023
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }
        maven {
            name = "TheIllusiveC4's Maven"
            url = "https://maven.theillusivec4.top/"
        }
        maven {
            url "https://maven.jamieswhiteshirt.com/libs-release"
            content {
                includeGroup "com.jamieswhiteshirt"
            }
        }
        maven {
            name = 'GeckoLib'
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
            content {
                includeGroupByRegex("software\\.bernie.*")
                includeGroup("com.eliotlash.mclib")
            }
        }
        maven {
            name = "Ladysnake Mods"
            url = 'https://maven.ladysnake.org/releases'
        }
        maven {
            name = "Curse Maven"
            url = "https://cursemaven.com"
        }
        maven {
            name = "Modrinth Maven"
            url = "https://api.modrinth.com/maven"
        }
    }

    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        options.encoding = "UTF-8"
        options.release = libs.versions.java.get() as Integer
        options.warnings = false
    }

    java {
        toolchain.languageVersion = JavaLanguageVersion.of(libs.versions.java.get())
        withSourcesJar()
        withJavadocJar()
    }

    // silence missing javadoc comments, we just don't care
    javadoc.options.addStringOption("Xdoclint:none", "-quiet")

    tasks.withType(Jar).configureEach {
        duplicatesStrategy DuplicatesStrategy.EXCLUDE

        from rootProject.file("../LICENSE.md")
        from rootProject.file("../LICENSE-ASSETS.md")
        from rootProject.file("../LICENSING.md")
        from rootProject.file("CHANGELOG.md")

        manifest {
            attributes([
                    "Specification-Title"           : mod_name,
                    "Specification-Version"         : mod_version,
                    "Specification-Vendor"          : mod_author,
                    "Implementation-Title"          : mod_name,
                    "Implementation-Version"        : mod_version,
                    "Implementation-Vendor"         : mod_author,
                    "Implementation-Timestamp"      : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Implementation-Timestamp-Milli": System.currentTimeMillis(),
                    "Implementation-URL"            : mod_source_url,
                    "Built-On-Java"                 : "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})",
                    "Built-On-Minecraft"            : project_game_versions
            ])
        }

        group "jar"
    }

    tasks.withType(GenerateModuleMetadata) {
        // Disables Gradle's custom module metadata from being published to maven. The
        // metadata includes mapped dependencies which are not reasonably consumable by
        // other mod developers.
        enabled = false
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply from: 'https://raw.githubusercontent.com/ixDarkLorD/ModResources/main/gradle/v1/helper.gradle'

    loom {
        silentMojangMappingsLicense()
        mixin {
            useLegacyMixinAp = true
            defaultRefmapName = "$modid%s.refmap.json".formatted(project.name == "common" ? ".$project.name" : "")
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:${libs.versions.minecraft.get()}"
        mappings loom.layered() {
            officialMojangMappings() {
                setNameSyntheticMembers(true)
            }
            parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.version.get()}@zip")
        }
    }

    processResources {
        duplicatesStrategy DuplicatesStrategy.EXCLUDE

        from(project(":common").sourceSets.main.resources) {
            exclude "${modid}.common.mixins.json", "common.mixins.json"
        }

        from(project(":common").file("src/generated/resources")) {
            exclude ".cache/"
        }

        var fileNames = [
                "^common.mixins.json\$": "${modid}.common.mixins.json",
                "^fabric.mixins.json\$": "${modid}.fabric.mixins.json",
                "^neoforge.mixins.json\$": "${modid}.neoforge.mixins.json",
                "^forge.mixins.json\$": "${modid}.forge.mixins.json"
        ]

        fileNames.forEach {from, to -> rename from, to }

        var resourceProperties = project.properties + [
                project:            project,
                min_fml_version:    min_forge_version.replaceAll("\\..*", "")
        ]

        var matchingFiles = [
                "pack.mcmeta",
                "fabric.mod.json",
                "META-INF/neoforge.mods.toml",
                "META-INF/mods.toml",
                modid + ".common.mixins.json",
                modid + ".fabric.mixins.json",
                modid + ".neoforge.mixins.json",
                modid + ".forge.mixins.json",
                "common.mixins.json",
                "fabric.mixins.json",
                "neoforge.mixins.json",
                "forge.mixins.json"
        ]

        filesMatching(matchingFiles) {
            expand resourceProperties
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = archivesBaseName
                version = mod_version
                from components.java
                pom {
                    name = "${mod_name} [${project.name}]"
                    description = "${mod_description}"
                    url = "${mod_source_url}"
                    scm {
                        url = "${mod_source_url}"
                        connection = "${mod_source_url}".replace("https", "scm:git:git").concat(".git")
                        developerConnection = "${mod_source_url}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
                    }
                    issueManagement {
                        system = "github"
                        url = "${mod_issue_url}"
                    }
                    licenses {
                        license {
                            name = "${mod_license}"
                            url = "https://spdx.org/licenses/${mod_license}.html"
                        }
                    }
                    developers {
                        developer {
                            id = "${mod_author}".toLowerCase()
                            name = "${mod_author}"
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "ModResources"
                url "file://" + project.hasProperty("mod_resources") ? "${project.findProperty("mod_resources")}/maven" : null
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    build.finalizedBy project.tasks.copyJarToDir, project.tasks.incrementBuildNumber
    if (project_loaders.contains(project.name) && loom.isForgeLike()) {
        [tasks.publishCurseforge, tasks.publishModrinth].each {
            it.finalizedBy project.tasks.refreshUpdateJson
        }
    }
}

architectury {
    minecraft = libs.versions.minecraft.get()
}

apply from: 'https://raw.githubusercontent.com/ixDarkLorD/ModResources/main/gradle/v1/tasks.gradle'