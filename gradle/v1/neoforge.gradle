apply plugin: "com.github.johnrengelman.shadow"

architectury {
    platformSetupLoomIde()
    neoForge()
}

sourceSets.main.resources { srcDir file("src/generated/resources") }

loom {
    neoForge {
        accessTransformers = files('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("../run")
            vmArgs "-Xms${runtime_min_ram}", "-Xmx${runtime_max_ram}"
            vmArg('-Dneoforge.warnings.onlyin.hide=true')
            property 'mixin.debug.export', mixin_debug
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'terminal.ansi', 'true'
        }
        client {
            client()
            setConfigName("NeoForge Client ${libs.versions.minecraft.get()}")
            programArgs("--username", "Player####")
        }
        server {
            server()
            setConfigName("NeoForge Server ${libs.versions.minecraft.get()}")
        }
        data {
            data()
            setConfigName("NeoForge Data ${libs.versions.minecraft.get()}")
            programArgs("--all", "--mod", modid)
            programArgs("--existing", project(":common").file("src/main/resources").absolutePath)
            programArgs("--output", file("src/generated/resources").absolutePath)
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name = "NeoForged"
        url = "https://maven.neoforged.net/releases/"
    }
    maven {
        name = "TheIllusiveC4"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "OctoStudios"
        url = "https://maven.octo-studios.com/releases/"
    }
}

dependencies {
    // NeoForge
    neoForge libs.neoforge.loader

    // Common Project
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    // Nullable annotations.
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.jetbrains:annotations:23.0.0'

    if (libs.hasProperty("bettermodsbutton") && libs.bettermodsbutton.hasProperty("neoforge")) {
        modLocalRuntime(libs.bettermodsbutton.neoforge) { transitive = false }
    }
}

tasks.withType(Jar).configureEach {
    exclude "architectury.common.json"
}

shadowJar {
    exclude 'fabric.mod.json'
    exclude 'architectury.common.json'
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    atAccessWideners.add("${modid}.accesswidener")
}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

[tasks.publishMod, tasks.publishCurseforge, tasks.publishModrinth, tasks.publishGitHub].each { it.finalizedBy project.tasks.refreshUpdateJson }