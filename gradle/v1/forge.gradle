apply plugin: "com.github.johnrengelman.shadow"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        useCustomMixin = false

        if (project(":common").file("src/main/resources/${modid}.common.mixins.json").exists() || project(":common").file("src/main/resources/common.mixins.json").exists()) {
            mixinConfig "${modid}.common.mixins.json"
        }
        if (project.file("src/main/resources/${modid}.forge.mixins.json").exists() || project.file("src/main/resources/forge.mixins.json").exists()) {
            mixinConfig "${modid}.forge.mixins.json"
        }
    }

    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("../run")
            vmArgs("-Xms1G", "-Xmx4G", "-Dmixin.debug.export=true")
        }
        client {
            client()
            setConfigName("Forge Client ${libs.versions.minecraft.get()}")
            programArgs("--username", "Player####")
        }
        server {
            server()
            setConfigName("Forge Server ${libs.versions.minecraft.get()}")
        }
        data {
            data()
            setConfigName("Forge Data ${libs.versions.minecraft.get()}")
            programArgs("--all", "--mod", modid)
            programArgs("--existing", project(":common").file("src/main/resources").absolutePath)
            programArgs("--output", project(":common").file("src/generated/resources").absolutePath)
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

// Force this version of jopt-simple as does Forge, otherwise client configuration is unable to launch.
configurations.configureEach {
    resolutionStrategy {
        force "net.sf.jopt-simple:jopt-simple:5.0.4"
    }
}

repositories {
    maven {
        name = "Minecraft Forge"
        url = "https://maven.minecraftforge.net/"
    }
    maven {
        name = "TheIllusiveC4"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "OctoStudios"
        url = "https://maven.octo-studios.com/releases/"
    }
}

dependencies {
    // Common Project
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Minecraft Forge
    forge libs.minecraftforge.forge

    // Mixin Extras
    implementation(annotationProcessor(libs.mixinextras.common.get()))

    if (libs.hasProperty("bettermodsbutton") && libs.bettermodsbutton.hasProperty("forge")) {
        // This should be modLocalRuntime, but it is currently broken for Forge.
        localRuntime(libs.bettermodsbutton.forge) { transitive = false }
    }
}

tasks.withType(Jar).configureEach {
    exclude "architectury.common.json"
}

// Merge the classes and resources into the same directory, as Java expects modules to be in a single directory.
// Aims to avoid issues with classes from the Forge (not Common) subproject occasionally not being included at runtime.
sourceSets.each {
    var dir = layout.buildDirectory.dir("sourcesSets/${it.name}")
    it.java.destinationDirectory = dir
    it.output.resourcesDir = dir
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = ""
    atAccessWideners.add("${modid}.accesswidener")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

[tasks.publishMod, tasks.publishCurseforge, tasks.publishModrinth, tasks.publishGitHub].each { it.finalizedBy project.tasks.refreshUpdateJson }